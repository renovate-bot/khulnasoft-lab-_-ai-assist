---
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

image: python:3.11.11

stages:
  - lint
  - build
  - test
  - deploy-review
  - validate
  - release
  - ingest
  - runway_staging
  - runway_production

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POETRY_CACHE_DIR: "$CI_PROJECT_DIR/.cache/poetry"

  DOCKER_VERSION: "20.10.23"
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_MODEL_GATEWAY: "$CI_REGISTRY_IMAGE/model-gateway"
  DOCKER_INGEST: "$CI_REGISTRY_IMAGE/ingest"
  DOCKERHUB_MODEL_GATEWAY: "gitlab/model-gateway"

  TARGET_IMAGE: "$DOCKER_MODEL_GATEWAY:$CI_COMMIT_SHORT_SHA"
  INGEST_IMAGE: "$DOCKER_INGEST:$CI_COMMIT_SHORT_SHA"
  SELF_HOSTED_TARGET_IMAGE: "$DOCKER_MODEL_GATEWAY/self-hosted:$CI_COMMIT_SHORT_SHA"
  DOCKERHUB_MODEL_GATEWAY_IMAGE: "gitlab/model-gateway:$CI_COMMIT_TAG"
  DOCKERHUB_MODEL_GATEWAY_SELF_HOSTED_IMAGE: "gitlab/model-gateway-self-hosted:$CI_COMMIT_SHORT_SHA"

  SAST_EXCLUDED_PATHS: "tests, tmp, api"

  CLOUD_CONNECTOR_SERVICE_NAME: "gitlab-ai-gateway"

include:
  - local: .gitlab/ci/build.gitlab-ci.yml
  - local: .gitlab/ci/lint.gitlab-ci.yml
  - local: .gitlab/ci/release.gitlab-ci.yml
  - local: .gitlab/ci/ingest.gitlab-ci.yml
  - template: Jobs/Container-Scanning.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  - template: Jobs/SAST.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml

  # Includes a base template for running kaniko easily
  # see https://gitlab.com/gitlab-com/gl-infra/common-ci-tasks/-/blob/main/kaniko.md
  - project: "gitlab-com/gl-infra/common-ci-tasks"
    ref: v2.77 # renovate:managed
    file: "kaniko.yml"

  - project: "gitlab-com/gl-infra/platform/runway/runwayctl"
    file: "ci-tasks/service-project/runway.yml"
    inputs:
      runway_service_id: ai-gateway
      image: "$CI_REGISTRY_IMAGE/model-gateway:${CI_COMMIT_SHORT_SHA}"
      runway_version: v3.53.0
  - project: "gitlab-com/gl-infra/platform/runway/runwayctl"
    file: "ci-tasks/service-project/runway.yml"
    inputs:
      runway_service_id: ai-gateway-custom
      image: "$SELF_HOSTED_TARGET_IMAGE"
      runway_version: v3.53.0
  - component: ${CI_SERVER_FQDN}/gitlab-org/components/danger-review/danger-review@2.0.0
    rules:
      - if: $CI_SERVER_HOST == "gitlab.com"

cache:
  key:
    files:
      - poetry.lock
      - .gitlab-ci.yml
  paths:
    - $PIP_CACHE_DIR
    - $POETRY_CACHE_DIR
    - requirements.txt
    - scripts/lib/
    - scripts/vendor/

.poetry:
  before_script:
    - pip install poetry==1.8.5
    - poetry config virtualenvs.in-project true
    - poetry config cache-dir ${POETRY_CACHE_DIR}
    - poetry export -f requirements.txt --output requirements.txt --without-hashes
    - poetry config --list

.docker:
  image: docker:${DOCKER_VERSION}
  services:
    - docker:${DOCKER_VERSION}-dind
  variables:
    REGISTRY_USER: "$CI_REGISTRY_USER"
    REGISTRY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    REGISTRY: "$CI_REGISTRY"
  before_script:
    - docker login -u "$REGISTRY_USER" -p "$REGISTRY_PASSWORD" "$REGISTRY"

install:
  extends: .poetry
  stage: build
  script:
    - poetry install

build-docker-model-gateway:
  stage: build
  extends:
    - .kaniko_base
  variables:
    KANIKO_BUILD_FILE: Dockerfile
    KANIKO_DESTINATION: "${TARGET_IMAGE}"
    CLOUD_CONNECTOR_SERVICE_NAME: "${CLOUD_CONNECTOR_SERVICE_NAME}"

tests:unit:
  extends: .poetry
  stage: test
  needs:
    - install
  script:
    - make test-coverage-ci
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    expire_in: 1 weeks
    reports:
      junit:
        - .test-reports/*.xml
      coverage_report:
        coverage_format: cobertura
        path: .test-reports/coverage.xml
  variables:
    # Enabling debug mode of asyncio so that the test fails in the following cases:
    # - asyncio checks for coroutines that were not awaited and logs them; this mitigates the “forgotten await” pitfall.
    # - Many non-threadsafe asyncio APIs (such as loop.call_soon() and loop.call_at() methods) raise an exception if they are called from a wrong thread.
    PYTHONASYNCIODEBUG: "True"

tests:integration:
  extends: .poetry
  stage: test
  needs:
    - build-docker-model-gateway
  services:
    - name: ${TARGET_IMAGE}
      alias: ai-gateway
  variables:
    AIGW_SELF_SIGNED_JWT__SIGNING_KEY: "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC+ErJOBYMe4/d5\nlcVtqnQEazhGYqyefHQNtfpzQyb/WuPJa5BZu68KeS0fWKcZJluNk/jGXSb3cvei\n28wtnbBlEOdTTOzMpP217rLtoYdnzgJfO7DLj3tUL+JbQHj51bLwgkrHlALFDoUt\nzWaOrs+WO6QVLnIsl+YZ6CrKpc9fXLtlvZp0yYuic1BxKCw8Q2lWjMhj6w1fubwM\ne3MsTMcgBV5ek3twY/vHkU/Q2gjniLZSTBmzaXrHjfbS1au2vQBTsKmtPDATrnTU\nVLxLvAtb7p3bZAZObIj4oDi+2qGQGDoWVaiGYXfRquKHdle7hBLwuvOlmVGAdfHd\nN18QO9kbAgMBAAECggEAQpdJScVrnThv/PRocVXtBJlN43bxlCr0+9K8NoKZ2I/O\ny0P4lD+JgUlX8in8jPafz7e+SjzbiIkKUk/gNkEPSjFEYi5Krh3F12YT4OYdCtSl\nhxjiBUc1BZcrHh415A2m/dUf/tEPsVs3dIcIPcfn6XHmuBcIIDBtiLkKuOmjf/xh\n/2l7QUHNC0Hn1STNvE5CscnqH0/s9dw2/KYhjpZWJsoNOAJ4PWgypxlftdUcspQK\nQL+FWrNL+aa1+nPeR0ArNw3nlkKnzcX3DmIHyD4az1IwrzHqMCh1zv16eqmCBYuN\nn2QrAAkAt+SFVEwjejwN/lNLMg4O6tyMvFnuOddp2QKBgQDhXgmOZgoJJYz7Vd0u\n/U3E4Ma+HysQ7TU3utidAke5YJXSms0UJrOFxgcRKserkXjD9wbyeUcMbrKRNTxm\nPgjGayVCqVc6T3kMHio8CvSs+RYt+jR7CnFIfQbQATR7c8nzy4Z/JNsW213SmXpj\n4S3TQWwGFSrF8h+A098cgFwNGQKBgQDX6IvIumrnQGiCJn8qQW3hKGfJwSl6/e4Z\nfC/o8uFzTtV1aL39AusDKAt4c5DsVUHCZLSH5acFGeeGt4dePpqnr0dpIb02ByGJ\na6tLJm2RwjaiXFOAsedOP12yqTZELi7rinKjVqG50eOvXuV40CVVP9qXzxE9e2DP\nQGe2ZFmqUwKBgFvsCkPNtOw0J8PgKt5erRjPgeDMP7mgtyMrD+1Cn9Sp45JKV7mP\na4v10K4c3+JH7JUprei6tNMKV8VIjIE7bkLYMxN0lMKQ5dOefiWNZm0jD/vi4QMK\nqFgjvuKaiziLauUIr6wucTpqcWNT/Iq+rv1K4u+8NH0Wm+jlAkzSwjkJAoGAG5Wd\nTk7q25KyB3bNpmNnm22jHPatywXoRp9EK7nkLewzf2WbaFjYF7YlCQWSzW7zENf2\n7KndldxCZUbLZ7IN5kCRmg/ycZWlpj34S4ikVQwAGOw8yuNvzuJvoSTXRwyzd+pf\nTRkDXo8/TKeOH8pQCr02u1B8PmOl8bSjy3y0q/sCgYAkdWZ6xLJeS9HlzuuXchl3\numZM4n88lad2yNoCu3aJs2fbVCGCiHyFsThluDU0KD3xE5+RZVpAMTErcCE3HqNK\nn1rbBNBVtUTKeu1Qkw0B1X813oH7omqmZVGJx+hceIKimjKWvD7hQlr90NPoFDFz\n0Laqissu1lxAspLYIulpWg==\n-----END PRIVATE KEY-----"
    AIGW_SELF_SIGNED_JWT__VALIDATION_KEY: "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC5wpUNTuvvZeDn\nDF7BHxPQGNT+b8abaBLzRXB7HU0pKxUqW35BhEBrhbs4ahntOTx4LWTk/rPcaohU\n3jVXVe0luTHqsXqj0uqBhdbC161Bey2gwZUszN94l59n/hzSy9dWjN4g9ZaV8Qcq\nWAsGo/NiIHTp2BkmPSL3yedQXkZpUYEIpQpC8T3MozA3fGla8OveCf5UiEbYmKgA\nu+h9efeTLJD08QXOgAiI3OVvUwKsNeCiyYj2Xufp1dW9SdYN05PNxxQEPMLwwV0A\nfwn1SZL7naaCvoiy3IIr7lY9NAxboAhzSQFOmIOw4kXjju6d2HmUytzxHlsjZp5A\ngRTPLweJAgMBAAECggEAFUAcj4twA7DGr//TBipBOLzifuH4GTaodlKDCd6CAXvn\nfbM+SA3yVaqUjqFaqm/yCjh9MpItrsE0K+tItF9E1BwxyOy5QC0EfUE7nooQTK2j\n/GAw6dFdHj1QM9QW5YmCrqjKT4Bw0+HhJTexuTZ/xQG8BjVduSlkyu56yw+h4/HH\n2FqjwPj5DTtZj5qrW1ywJCkBcGkVv87ml64evOX9PQPhsu0UpSoycLDoFNCGN5qC\nu+7/lvhU6YQcwq8J3G80VPIRQr6QTd4SXjNveyCZIdSlrDiOJvypTz3+RIvuymNW\nDzvHlV2jr5gfFkSRK5mEoiKVb96BVbxXSS1Fsv8V4QKBgQD7XWNLmxeywhp+HhQu\nk2+00N1QfJWOd2mehKEdWyNRNloEb3510scPWYnYDp8NrPXlFLxWEg9nIstFPEF4\nfJlkoNy4jzYVowv4CEQ3NCr90HQe5cSpuG/oGX4uiFuC9pn23XwZd49a74Z2KNFB\n5bz/saE3HO+wdG/vmuBjSukuuQKBgQC9L37lczb5URUpaAu0RxkE0/4GHzoN0yHB\n+NlqX2i75DK40KTqpjN8MHKrqW4VwXJacrfpAoPnZBgi9DsHIvN1iVFMyhSzYkTD\nyrqFxTkJcAq9FOFF878dHCr5qvzoV+G7EwKdYUa0kOmJQZYPHy/uGPgZhD+y09op\nQW7puom3UQKBgCsrC511YimB6jjUg5TIHzwHTqq+6pRP76SYlG7NMxCEbAss9qPX\ncfYx41lmkWww0v3nhLynV1vX/t7CDWBazaEZey568cffe3O6P7TXUbbLMNYJka+w\nDA/pKOFm64hfP2vE98YL4WO1lPr/4YgWo1GqOMyVPJiqNnsItxZ2S/uJAoGAO2fF\nngEeuw0F6xmby0EkDwsOUhfOH/czO3iLtMY+2fkfID+L+Y60zgNcjqDGS5iR8urg\n6w76Ileg6KDuRCBqeHblC4rNE0MBOsXW6hhy/46qIJOE5XVThq2IpRtXDRJDdH3U\nrVyVWi/C1XG90APIBijbBxAq/FlfwOKmFEiZ4/ECgYAArmmklXcqPfYfwvlP2wgu\nTIw9nFIUWGP7UlVTsXdVGkehilWgG7UUFAx1mPT9hRcjY9dbsIl5yEMJG3KmTydG\nKymFDMPv0Wpo0LKgp+MH5Xeutbp6+HW2HaWeolIlDMsrKG6vPcmePtT6UeQc1TG5\n+OuRxXWVAxwxNsBaHYYWyA==\n-----END PRIVATE KEY-----"
    AIGW_AUTH__BYPASS_EXTERNAL_WITH_HEADER: true
    AIGW_MOCK_MODEL_RESPONSES: true
    AIGW_FASTAPI__API_PORT: 5052
    AI_GATEWAY_URL: "http://ai-gateway:5052"
    CI_DEBUG_SERVICES: true
  script:
    - make test-integration

container_scanning:
  stage: test
  needs:
    - build-docker-model-gateway
  rules:
    - if: $CONTAINER_SCANNING_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
  variables:
    CS_IMAGE: $TARGET_IMAGE

gemnasium-python-dependency_scanning:
  stage: test
  needs:
    - install
  rules:
    - if: $DEPENDENCY_SCANNING_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG

secret_detection:
  stage: test
  needs:
    - install
  cache: {}
  rules:
    - if: $SECRET_DETECTION_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG

semgrep-sast:
  stage: test
  needs:
    - install
  rules:
    - if: $SAST_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG

tag-self-hosted:
  stage: release
  needs:
    - build-docker-model-gateway
  script:
    - |
      git tag "self-hosted-${GITLAB_VERSION}" ${CI_COMMIT_SHA}
      git push origin "self-hosted-${GITLAB_VERSION}"
  rules:
    - if: $GITLAB_VERSION
